import os
import io
import re
import json
import base64
import requests
import mimetypes
import numpy as np
import cv2
import markdown  
from datetime import datetime
from flask import Flask, request, jsonify, render_template_string, send_file, session, redirect, url_for
from werkzeug.utils import secure_filename
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image, ListFlowable, ListItem
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch


# ðŸ”‘ Hugging Face Token (set this in your environment instead of hardcoding)
HF_API_TOKEN = os.environ.get("HF_TOKEN", "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")

APP_TITLE = "AI Hair Analyzer (Demo)"
UPLOAD_DIR = os.path.join(os.path.dirname(__file__), "uploads")
os.makedirs(UPLOAD_DIR, exist_ok=True)

app = Flask(__name__)
app.secret_key = os.environ.get("FLASK_SECRET", "supersecret123")
app.config.update(UPLOAD_FOLDER=UPLOAD_DIR, MAX_CONTENT_LENGTH=8 * 1024 * 1024)


# ---------------- Utility ----------------
def _read_image(file_storage) -> np.ndarray:
    data = np.frombuffer(file_storage.read(), dtype=np.uint8)
    img = cv2.imdecode(data, cv2.IMREAD_COLOR)
    if img is None:
        raise ValueError("Could not decode image.")
    return img

def analyze_hair_results(analysis_results, image_path):
    prompt = f"""
    You are a professional trichologist AI.
    Based on the following hair analysis results, provide a clear summary 
    and actionable personalized suggestions:

    Hair Type: {analysis_results.get("hair_type", "Not specified")}
    Scalp Condition: {analysis_results.get("scalp_condition", "Not specified")}
    Issues: {", ".join(analysis_results.get("issues", [])) if analysis_results.get("issues") else "None"}
    Age: {analysis_results.get("age")}
    Sex: {analysis_results.get("sex")}
    Family History: {analysis_results.get("family_history")}
    Stress Level: {analysis_results.get("stress")}
    Diet Quality: {analysis_results.get("diet_quality")}
    Sleep Hours: {analysis_results.get("sleep_hours")}
    Regimen Strength: {analysis_results.get("regimen_strength")}

    Format response with:
    ## Summary of Condition
    ## AI Recommendations (lifestyle, diet, and product tips)
    """

    # Load image as bytes
    with open(image_path, "rb") as f:
        image_bytes = f.read()

    url = "https://api-inference.huggingface.co/models/llava-hf/llava-1.5-7b-hf"
    headers = {
        "Authorization": f"Bearer {HF_API_TOKEN}",
    }
    payload = {
        "inputs": {
            "text": prompt,
            "image": image_bytes.decode("latin1")  # send image bytes
        },
        "parameters": {"max_new_tokens": 512, "temperature": 0.6}
    }

    try:
        r = requests.post(url, headers=headers, json=payload, timeout=90)
        r.raise_for_status()
        resp = r.json()

        # Depending on HF output format
        if isinstance(resp, list) and "generated_text" in resp[0]:
            content = resp[0]["generated_text"]
        elif "generated_text" in resp:
            content = resp["generated_text"]
        else:
            content = json.dumps(resp)

        return {
            "analysis_summary": "AI-generated personalized hair report:",
            "ai_suggestions": content.strip()
        }

    except Exception as e:
        return {"analysis_summary": "Error", "ai_suggestions": str(e)}


def generate_pdf_report(ai_suggestions, scalp_image_path=None):
    """Generate PDF report with scalp image + AI suggestions"""
    buffer = io.BytesIO()

    def add_footer(canvas_obj, doc):
        canvas_obj.saveState()
        footer_text = f"Generated by AI Hair Analyzer â€“ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        canvas_obj.setFont("Helvetica-Oblique", 8)
        canvas_obj.drawCentredString(A4[0] / 2.0, 0.5 * inch, footer_text)
        canvas_obj.restoreState()

    doc = SimpleDocTemplate(buffer, pagesize=A4)
    styles = getSampleStyleSheet()
    title_style = styles["Title"]
    heading_style = ParagraphStyle("Heading", parent=styles["Heading2"], spaceAfter=8, textColor="#2E3A59")
    bullet_style = ParagraphStyle("Bullet", parent=styles["Normal"], leftIndent=20, bulletIndent=10, spaceAfter=4)
    normal_style = styles["Normal"]

    story = []
    story.append(Paragraph("AI Hair Analysis Report", title_style))
    story.append(Spacer(1, 12))

    if scalp_image_path and os.path.exists(scalp_image_path):
        story.append(Image(scalp_image_path, width=300, height=200))
        story.append(Spacer(1, 12))

    # Convert AI output into styled text
    lines = ai_suggestions.split("\n")
    bullets = []
    for line in lines:
        line = line.strip()
        if not line:
            if bullets:
                story.append(ListFlowable(bullets, bulletType="bullet", start="â€¢", leftIndent=20))
                story.append(Spacer(1, 8))
                bullets = []
            continue

        if line.startswith("##"):
            if bullets:
                story.append(ListFlowable(bullets, bulletType="bullet", start="â€¢", leftIndent=20))
                bullets = []
            story.append(Paragraph(line.replace("##", "").strip(), heading_style))
            story.append(Spacer(1, 6))

        elif line.startswith("* ") or line.startswith("- "):
            bullets.append(ListItem(Paragraph(line[2:], bullet_style)))

        elif re.match(r"^\d+\.", line):
            story.append(Paragraph(line, normal_style))

        elif "**" in line:
            formatted = re.sub(r"\*\*(.*?)\*\*", r"<b>\1</b>", line)
            story.append(Paragraph(formatted, normal_style))

        else:
            story.append(Paragraph(line, normal_style))

    if bullets:
        story.append(ListFlowable(bullets, bulletType="bullet", start="â€¢", leftIndent=20))

    doc.build(story, onFirstPage=add_footer, onLaterPages=add_footer)
    buffer.seek(0)
    return buffer


# ---------------- HTML Template ----------------
INDEX_HTML = """
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>{{ APP_TITLE }}</title>
  <style>
    body { font-family: system-ui, -apple-system, Segoe UI, Roboto, sans-serif; margin: 2rem; }
    .card { border: 1px solid #e5e7eb; border-radius: 16px; padding: 1.25rem; margin-bottom: 1rem; box-shadow: 0 1px 10px rgba(0,0,0,.04); }
    .grid { display: grid; gap: 1rem; grid-template-columns: repeat(auto-fit, minmax(260px, 1fr)); }
    label { display:block; font-weight:600; margin:.5rem 0 .25rem; }
    input, select { width:100%; padding:.6rem .7rem; border-radius:10px; border:1px solid #d1d5db; }
    button { padding:.8rem 1rem; border-radius:12px; border:0; background:#111827; color:white; font-weight:600; cursor:pointer; }
    .results { line-height:1.6; }
  </style>
</head>
<body>
  <h1>{{ APP_TITLE }}</h1>
  <p>Upload a scalp photo and provide details below.</p>

  <form class="card" action="/analyze" method="post" enctype="multipart/form-data">
    <div class="grid">
      <div><label>Scalp Photo</label><input type="file" name="photo" accept="image/*" required /></div>
      <div><label>Age</label><input type="number" name="age" value="28" required /></div>
      <div><label>Sex</label><select name="sex"><option>male</option><option>female</option></select></div>
      <div><label>Family History</label><select name="family_history"><option value="no">No</option><option value="yes">Yes</option></select></div>
      <div><label>Stress (1â€“5)</label><input type="number" name="stress" min="1" max="5" value="3"></div>
      <div><label>Diet Quality (1â€“5)</label><input type="number" name="diet_quality" min="1" max="5" value="3"></div>
      <div><label>Sleep Hours</label><input type="number" step="0.1" name="sleep_hours" value="7"></div>
      <div><label>Regimen</label><select name="regimen_strength"><option>standard</option><option>none</option><option>aggressive</option></select></div>
    </div>
    <button type="submit">Analyze</button>
  </form>

  {% if result %}
  <div class="card">
    <h2>AI Results</h2>
    <h3>{{ result.analysis_summary }}</h3>
    <div class="results">{{ result.ai_html | safe }}</div>
    <a href="/download"><button>Download PDF Report</button></a>
  </div>
  {% endif %}

  {% if error %}
  <div class="card"><b>Error:</b> {{ error }}</div>
  {% endif %}
</body>
</html>
"""


# ---------------- Routes ----------------
@app.route("/", methods=["GET"])
def index():
    return render_template_string(INDEX_HTML, APP_TITLE=APP_TITLE)


@app.route("/analyze", methods=["POST"])
def analyze_form():
    file = request.files.get("photo")
    if not file:
        return render_template_string(INDEX_HTML, result=None, error="No file uploaded", APP_TITLE=APP_TITLE)

    try:
        filename = secure_filename(file.filename)
        image_path = os.path.join(UPLOAD_DIR, filename)
        file.save(image_path)

        # collect form data
        age = int(request.form.get("age", 28))
        sex = request.form.get("sex", "male")
        family_history = request.form.get("family_history", "no") == "yes"
        stress = int(request.form.get("stress", 3))
        diet_quality = int(request.form.get("diet_quality", 3))
        sleep_hours = float(request.form.get("sleep_hours", 7))
        regimen_strength = request.form.get("regimen_strength", "standard")

        result = analyze_hair_results({
            "hair_type": "Dry",
            "scalp_condition": "Oily",
            "issues": ["Hair Fall", "Dandruff"],
            "age": age,
            "sex": sex,
            "family_history": family_history,
            "stress": stress,
            "diet_quality": diet_quality,
            "sleep_hours": sleep_hours,
            "regimen_strength": regimen_strength,
        }, image_path)

        # Render markdown for UI
        result["ai_html"] = markdown.markdown(result["ai_suggestions"])

        # Store in session
        session["last_result"] = json.dumps(result)
        session["last_image"] = image_path

        return render_template_string(INDEX_HTML, result=result, APP_TITLE=APP_TITLE)

    except Exception as e:
        return render_template_string(INDEX_HTML, result=None, error=str(e), APP_TITLE=APP_TITLE)


@app.route("/download", methods=["GET"])
def download_report():
    result_json = session.get("last_result")
    image_path = session.get("last_image")

    if not result_json:
        return redirect(url_for("index"))

    result = json.loads(result_json)
    pdf_buffer = generate_pdf_report(result["ai_suggestions"], image_path)

    return send_file(pdf_buffer, as_attachment=True,
                     download_name="Hair_Report.pdf", mimetype="application/pdf")


# ---------------- Run ----------------
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, debug=True)
